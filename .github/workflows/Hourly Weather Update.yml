name: Hourly Weather Update

on:
  schedule:
     - cron: '*/5 * * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  weather-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch weather updates
        run: |
          API_KEY="b3c68b2c9eb541e0836135303242011"
          CITIES=("Valsad" "Boston")
          WEATHER_DATA=""
          for CITY in "${CITIES[@]}"; do
            RESPONSE=$(curl -s "http://api.weatherapi.com/v1/current.json?key=${API_KEY}&q=${CITY}")
            TEMP=$(echo "$RESPONSE" | jq -r '.current.temp_c')
            CONDITION=$(echo "$RESPONSE" | jq -r '.current.condition.text')
            WEATHER_DATA+="$CITY,$TEMP,$CONDITION\n"
          done
          echo -e "$WEATHER_DATA" > weather_updates.csv

      - name: Update README.md
        run: |
          # Create a temporary script for table generation
          cat > update_table.sh << 'SCRIPT_EOF'
          #!/bin/bash
          
          # Function to get weather emoji
          get_weather_emoji() {
            local condition="$1"
            case "$condition" in
              *"Sunny"*|*"Clear"*) echo "‚òÄÔ∏è" ;;
              *"rain"*|*"Rain"*|*"shower"*|*"Shower"*) echo "üåßÔ∏è" ;;
              *"cloud"*|*"Cloud"*|*"Overcast"*) echo "‚òÅÔ∏è" ;;
              *"snow"*|*"Snow"*) echo "‚ùÑÔ∏è" ;;
              *"storm"*|*"Storm"*|*"thunder"*|*"Thunder"*) echo "‚õàÔ∏è" ;;
              *"fog"*|*"Fog"*|*"mist"*|*"Mist"*) echo "üå´Ô∏è" ;;
              *"wind"*|*"Wind"*) echo "üí®" ;;
              *"Partly cloudy"*) echo "‚õÖ" ;;
              *) echo "üå§Ô∏è" ;;
            esac
          }
          
          # Start building the enhanced table
          WEATHER_TABLE='<div align="center">
          <table style="border-collapse: collapse; margin: 25px 0; font-size: 0.9em; font-family: -apple-system, BlinkMacSystemFont, '"'"'Segoe UI'"'"', '"'"'Roboto'"'"', sans-serif; min-width: 400px; border-radius: 5px 5px 0 0; overflow: hidden; box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);">
            <thead style="background-color: #009879; color: #ffffff; text-align: left; font-weight: bold;">
              <tr>
                <th style="padding: 15px 20px; border-bottom: 1px solid #dddddd;">üèôÔ∏è City</th>
                <th style="padding: 15px 20px; border-bottom: 1px solid #dddddd;">üå°Ô∏è Temperature</th>
                <th style="padding: 15px 20px; border-bottom: 1px solid #dddddd;">‚òÅÔ∏è Condition</th>
              </tr>
            </thead>
            <tbody>'
          
          # Add rows with alternating colors
          row_count=0
          while IFS=, read -r CITY TEMP CONDITION; do
            if [ -n "$CITY" ] && [ -n "$TEMP" ] && [ -n "$CONDITION" ]; then
              weather_emoji=$(get_weather_emoji "$CONDITION")
              if [ $((row_count % 2)) -eq 0 ]; then
                bg_style="background-color: #f3f3f3;"
              else
                bg_style=""
              fi
              WEATHER_TABLE="${WEATHER_TABLE}
              <tr style=\"border-bottom: 1px solid #dddddd;\">
                <td style=\"padding: 12px 20px; ${bg_style}\"><strong>${CITY}</strong></td>
                <td style=\"padding: 12px 20px; ${bg_style} text-align: center;\"><span style=\"color: #009879; font-weight: bold;\">${TEMP}¬∞C</span></td>
                <td style=\"padding: 12px 20px; ${bg_style}\">${weather_emoji} ${CONDITION}</td>
              </tr>"
              row_count=$((row_count + 1))
            fi
          done < weather_updates.csv
          
          WEATHER_TABLE="${WEATHER_TABLE}
            </tbody>
          </table>
          </div>"
          
          echo "$WEATHER_TABLE"
          SCRIPT_EOF
          
          chmod +x update_table.sh
          TABLE_CONTENT=$(bash update_table.sh)
          
          # Use awk to replace the section between the markers
          awk -v table="$TABLE_CONTENT" '
            BEGIN {p=1}
            /<!-- WEATHER-UPDATE-START -->/ {print; print table; p=0; next}
            /<!-- WEATHER-UPDATE-END -->/ {p=1}
            p
          ' README.md > README.tmp && mv README.tmp README.md

      - name: Commit and push README.md updates
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "ambicuity"
          git config --global user.email "riteshrana36@gmail.com"
          git add README.md weather_updates.csv
          git commit -m "Update weather data in README.md" || echo "No changes to commit"
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git HEAD:main
